/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

/* eslint-disable @typescript-eslint/camelcase */

import { ScheduleKey, ThunkFunction } from "../../../../api/persistance-store.model";
import { ScheduleDataActionCreator } from "./schedule-data.action-creator";
import * as _ from "lodash";
import { copyShiftsToMonth, cropMonthInfoToMonth, getDateWithMonthOffset } from "./common-reducers";
import {
  cropScheduleDMToMonthDM,
  MonthDataModel,
} from "../../../../common-models/schedule-data.model";
import { LocalStorageProvider } from "../../../../api/local-storage-provider.model";

export class MonthSwitchActionCreator {
  static switchToNewMonth(offset: number): ThunkFunction<unknown> {
    return async (dispatch, getState): Promise<void> => {
      const actualSchedule = getState().actualState.persistentSchedule.present;
      const { revision } = getState().actualState;
      const actualMonth = cropScheduleDMToMonthDM(actualSchedule);
      const { month, year } = actualMonth.scheduleKey;

      const newDate = getDateWithMonthOffset(month, year, offset);
      const newMonthKey = new ScheduleKey(newDate.getMonth(), newDate.getFullYear());

      const nextMonth = await new LocalStorageProvider().fetchOrCreateMonthRevision(
        newMonthKey,
        revision,
        actualMonth
      );
      const addNewScheduleAction = ScheduleDataActionCreator.setScheduleFromMonthDM(
        nextMonth,
        false
      );

      dispatch(addNewScheduleAction);
    };
  }

  static copyActualMonthToMonthWithOffset(offset: number): ThunkFunction<unknown> {
    return async (dispatch, getState): Promise<void> => {
      const {
        month_number: month,
        year,
      } = getState().actualState.persistentSchedule.present.schedule_info;
      if (month === undefined || year === undefined) return;
      const fromDate = getDateWithMonthOffset(month, year, offset);
      const { revision } = getState().actualState;
      const storageProvider = new LocalStorageProvider();
      const copyingSchedule = await storageProvider.getMonthRevision(
        new ScheduleKey(fromDate.getMonth(), fromDate.getFullYear()).getRevisionKey(revision)
      );
      if (copyingSchedule) {
        const monthDataModel = copyMonthDM(new ScheduleKey(month, year), copyingSchedule);
        dispatch(ScheduleDataActionCreator.setScheduleFromMonthDM(monthDataModel, true));
      }
    };
  }
}

function copyMonthDM(newMonthKey: ScheduleKey, baseMonth: MonthDataModel): MonthDataModel {
  const { month, year } = newMonthKey;
  return {
    scheduleKey: newMonthKey,
    shifts: copyShiftsToMonth(
      new ScheduleKey(month, year),
      baseMonth.shifts,
      baseMonth.month_info.dates
    ),
    month_info: cropMonthInfoToMonth(new ScheduleKey(month, year), baseMonth.month_info),
    employee_info: _.cloneDeep(baseMonth.employee_info),
    isAutoGenerated: false,
  };
}

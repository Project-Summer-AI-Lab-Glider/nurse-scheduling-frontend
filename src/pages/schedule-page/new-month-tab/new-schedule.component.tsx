/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
import React, { useEffect, useMemo, useState } from "react";
import * as S from "./new-schedule.styled";
import nurse from "../../../assets/images/nurse.png";
import { EmptyMonthButtons } from "../../../components/buttons/empty-month-buttons/empty-month-buttons";
import { useSelector } from "react-redux";
import { isLoaded, useFirestoreConnect } from "react-redux-firebase";
import { isEmpty } from "lodash";
import { getPresentScheduleInfo } from "../../../state/schedule-data/selectors";
import { ScheduleKey } from "../../../logic/data-access/persistance-store.model";
import { t } from "../../../helpers/translations.helper";
import { Spinner } from "../../../components/Spinner";
import { useAppDispatch, useAppSelector } from "../../../state/store-hooks";
import { ScheduleDataActionCreator } from "../../../state/schedule-data/schedule-data.action-creator";

export function NewScheduleComponent(): JSX.Element {
  const [IsCloudScheduleSaved, setIsCloudScheduleSaved] = useState(false);

  const { month_number: currentMonth, year: currentYear } = useSelector(getPresentScheduleInfo);

  const scheduleKey = useMemo(
    () => new ScheduleKey(currentMonth, currentYear).getRevisionKey("actual"),
    [currentMonth, currentYear]
  );
  const scheduleDipatcher = useAppDispatch();
  const auth = useAppSelector(({ firebase: { auth } }) => auth);

  const org = useAppSelector((state) => state.firebase.profile.org);

  const isLoggedIn = !isEmpty(auth) && isLoaded(auth);

  const isInOrg = isLoaded(org) && !isEmpty(org);

  const schedules = useAppSelector(({ firestore: { data } }) => data.schedules);

  useFirestoreConnect(() => {
    if (isInOrg)
      return {
        collection: "organizations",
        doc: org,
        subcollections: [{ collection: "schedules" }],
        storeAs: "schedules",
      };
    return { collection: "organizations" };
  });

  useEffect(() => {
    if (isInOrg) {
      if (isLoaded(schedules) && !isEmpty(schedules)) {
        const schedule = schedules[scheduleKey];
        if (schedule && !schedule.isAutoGenerated) {
          setIsCloudScheduleSaved(true);
          scheduleDipatcher(ScheduleDataActionCreator.setScheduleStateAndSaveToDb(schedule));
        }
      }
    }
  }, [isInOrg, schedules, scheduleKey, scheduleDipatcher]);

  return (
    <S.Wrapper>
      {isLoggedIn && IsCloudScheduleSaved ? (
        <>
          <S.Image src={nurse} alt="" />
          <S.Message>{t("downloadingSchedule")}</S.Message>
          <Spinner />
        </>
      ) : (
        <>
          <S.Image src={nurse} alt="" />
          <S.Message>{t("youdonthaveplanforthismonth")}</S.Message>
          <EmptyMonthButtons />
        </>
      )}
    </S.Wrapper>
  );
}

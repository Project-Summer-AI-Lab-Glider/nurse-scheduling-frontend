/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

import {WorkerType} from "../../common-models/worker-info.model";
import {ChildrenInfoParser} from "./children-info.parser";
import {MetaDataParser} from "./metadata.parser";
import {ShiftsInfoParser} from "./shifts-info.parser";
import {Schedule, ScheduleProvider, Sections} from "../providers/schedule-provider.model";
import {ExtraWorkersParser} from "./extra-workers.parser";
import {InputFileErrorCode, ScheduleError} from "../../common-models/schedule-error.model";
import {FoundationInfoParser} from "./foundation-info.parser";
import {FoundationInfoOptions} from "../providers/foundation-info-provider.model";

export class ScheduleParser implements ScheduleProvider {
  readonly sections: Sections;
  readonly schedule: Schedule;
  readonly isAutoGenerated: boolean;
  _parseErrors: ScheduleError[] = [];

  constructor(readonly month, readonly year, rawSchedule: string[][][]) {
    this.sections = this.parseSections(rawSchedule);
    this.isAutoGenerated = false;
    this.schedule = new Schedule(this);
  }

  private logLoadFileError(msg: string): void {
    this._parseErrors.push({
      kind: InputFileErrorCode.LOAD_FILE_ERROR,
      message: msg,
    });
  }

  private parseSections(rawSchedule: string[][][]): Sections {
    if (rawSchedule.length !== 4) {
      this.logLoadFileError("Nie znaleziono 4 wydzielonych sekcji");
    }

    const s = new Set(rawSchedule.flat().map((a) => a.length));

    if (s.size !== 2 && !s.has(4)) {
      this.logLoadFileError("Długości sekcji nie są zgodne");
    }

    const seenTable = [false, false, false, false];
    const seenTableName = ["dane", "dzieci", "pielęgniarki", "opiekunowie"];

    let children;
    let nurses;
    let metadata;
    let babysiter;

    rawSchedule.forEach((r) => {
      if (r && r.length !== 0 && r[0].length !== 0) {
        const rKey = r[0][0].toLowerCase().trim();
        if (rKey === "grafik") {
          metadata = new MetaDataParser(this.month, this.year, r);
          seenTable[0] = true;
        } else if (rKey === "dzieci") {
          children = new ChildrenInfoParser(r);
          seenTable[1] = true;
        } else if (seenTable[2] === false) {
          nurses = new ShiftsInfoParser(r, WorkerType.NURSE, metadata);
          seenTable[2] = true;
        } else {
          babysiter = new ShiftsInfoParser(r, WorkerType.OTHER, metadata);
          seenTable[3] = true;
        }
      }
    });

    seenTable.forEach((s, id) => {
      if (s === false) {
        this.logLoadFileError("Nie znaleziono sekcji " + seenTableName[id]);
      }
    });

    const parsers: FoundationInfoOptions = {
      ChildrenInfo: children,
      NurseInfo: nurses,
      BabysitterInfo: babysiter,
      ExtraWorkersInfo: new ExtraWorkersParser(
        metadata ? (metadata as MetaDataParser).dates.length : 0
      ),
    };

    const foundationParser = new FoundationInfoParser(parsers);
    return {
      NurseInfo: nurses,
      BabysitterInfo: babysiter,
      FoundationInfo: foundationParser,
      Metadata: metadata,
    };
  }

  getWorkerTypes(): { [key: string]: WorkerType } {
    const result = {};
    Object.keys(this.sections.BabysitterInfo.workerShifts).forEach((babysitter) => {
      result[babysitter] = WorkerType.OTHER;
    });
    Object.keys(this.sections.NurseInfo.workerShifts).forEach((nurse) => {
      result[nurse] = WorkerType.NURSE;
    });

    return result;
  }
}

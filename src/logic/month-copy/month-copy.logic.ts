/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

import {
  MonthDataModel,
  ScheduleDataModel,
  validateScheduleContainer,
} from "../../common-models/schedule-data.model";
import * as _ from "lodash";
import { FREE_SHIFTS, ShiftCode, ShiftInfoModel } from "../../common-models/shift-info.model";
import { ArrayHelper } from "../../helpers/array.helper";
import { MonthInfoModel } from "../../common-models/month-info.model";
import { ScheduleKey } from "../../api/persistance-store.model";
import { MonthHelper } from "../../helpers/month.helper";
import { createDatesForMonth } from "../../common-models/schedule.model";

/* eslint-disable @typescript-eslint/camelcase */
export function copyMonthDM(
  currentSchedule: MonthDataModel,
  baseMonth: MonthDataModel
): ScheduleDataModel {
  const copiedMonth: ScheduleDataModel = {
    schedule_info: {
      UUID: "0",
      year: currentSchedule.scheduleKey.year,
      month_number: currentSchedule.scheduleKey.month,
    },
    shifts: copyShifts(currentSchedule, baseMonth.shifts),
    month_info: copyMonthInfo(currentSchedule, baseMonth.month_info),
    employee_info: _.cloneDeep(baseMonth.employee_info),
    shift_types: _.cloneDeep(baseMonth.shift_types),
    isAutoGenerated: false,
    isCorrupted: false,
  };
  validateScheduleContainer(copiedMonth);
  return copiedMonth;
}

export function copyShifts(
  { scheduleKey: currentScheduleKey, shifts: currentScheduleShifts }: MonthDataModel,
  baseShifts: ShiftInfoModel
): ShiftInfoModel {
  const { month: baseMonth, year: baseYear } = currentScheduleKey.prevMonthKey;

  const numberOfDaysToBeCopied = getNumberOfDaysToBeCopied(currentScheduleKey);

  const newMonthWorkersShifts: ShiftInfoModel = {};
  Object.keys(baseShifts).forEach((workerKey) => {
    const fullBaseMonthShifts = cropMonthDataToFullWeeks(
      baseYear,
      baseMonth,
      baseShifts[workerKey]
    );

    let missingShifts = ArrayHelper.circularExtendToLength(
      fullBaseMonthShifts,
      numberOfDaysToBeCopied
    );

    missingShifts = missingShifts.map((shift) => {
      return FREE_SHIFTS.includes(shift) ? ShiftCode.W : shift;
    });

    newMonthWorkersShifts[workerKey] = concatWithLastWeekFromPrevMonth(
      currentScheduleKey,
      missingShifts,
      currentScheduleShifts[workerKey] ?? []
    );
  });
  return newMonthWorkersShifts;
}

export function copyMonthInfo(
  { scheduleKey: currentScheduleKey, month_info: currentMonthInfo }: MonthDataModel,
  baseMonthInfo: MonthInfoModel
): MonthInfoModel {
  const dates = createDatesForMonth(currentScheduleKey.year, currentScheduleKey.month);
  return {
    children_number: copyMonthData(
      currentScheduleKey,
      currentMonthInfo.children_number ?? [],
      baseMonthInfo.children_number ?? []
    ),
    extra_workers: copyMonthData(
      currentScheduleKey,
      currentMonthInfo.extra_workers ?? [],
      baseMonthInfo.extra_workers ?? []
    ),
    dates,
    frozen_shifts: [],
  };
}

function copyMonthData<T>(monthKey: ScheduleKey, currentMonthData: T[], baseMonthData: T[]): T[] {
  const { month: baseMonth, year: baseYear } = monthKey.prevMonthKey;
  const numberOfDaysToBeCopied = getNumberOfDaysToBeCopied(monthKey);
  const copyBase = cropMonthDataToFullWeeks(baseYear, baseMonth, baseMonthData);

  const copiedData = ArrayHelper.circularExtendToLength(copyBase, numberOfDaysToBeCopied);
  return concatWithLastWeekFromPrevMonth(monthKey, copiedData, baseMonthData);
}

function concatWithLastWeekFromPrevMonth<T>(
  monthKey: ScheduleKey,
  copiedData: T[],
  baseData: T[]
): T[] {
  const prevMonthLastWeek = MonthHelper.getMonthLastWeekData(monthKey, baseData, copiedData);
  return prevMonthLastWeek ? prevMonthLastWeek.concat(copiedData) : copiedData;
}

function getNumberOfDaysToBeCopied(monthKey: ScheduleKey): number {
  const [, daysEditedInPrevMonth] = MonthHelper.calculateMissingFullWeekDays(monthKey.prevMonthKey);
  const [, daysFromNextMonth] = MonthHelper.calculateMissingFullWeekDays(monthKey);

  return (
    MonthHelper.getMonthLength(monthKey.year, monthKey.month) -
    daysEditedInPrevMonth +
    daysFromNextMonth
  );
}

function cropMonthDataToFullWeeks<T>(year: number, month: number, monthData: T[]): T[] {
  const firstMonthMonday = MonthHelper.findFirstMonthMondayIdx(year, month);
  return monthData.slice(
    firstMonthMonday,
    firstMonthMonday + MonthHelper.getMonthFullWeeksDaysLen(year, month)
  );
}

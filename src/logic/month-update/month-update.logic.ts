/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

import {
  AppThunkDispatch,
  GetAppState,
  MonthUpdater,
  RevisionType,
  ScheduleKey,
  ThunkFunction,
} from "../../api/persistance-store.model";
import { LocalStorageProvider } from "../../api/local-storage-provider.model";
import { MonthDataModel, ScheduleDataModel } from "../../common-models/schedule-data.model";
import { VerboseDateHelper } from "../../helpers/verbose-date.helper";
import { ScheduleDataActionCreator } from "../../state/reducers/month-state/schedule-data/schedule-data.action-creator";
import * as _ from "lodash";
import { ApplicationStateModel } from "../../state/models/application-state.model";
import { cropScheduleDMToMonthDM } from "../schedule-container-convertion/schedule-container-convertion";

export async function updateStateAndDB(
  dispatch: AppThunkDispatch<unknown>,
  getState: GetAppState,
  updateFunc: MonthUpdater
): Promise<void> {
  updateActualMonth(dispatch, getState, updateFunc);
  await updateNextMonthIfNeeded(getState, updateFunc);
}

function updateActualMonth(
  dispatch: AppThunkDispatch<unknown>,
  getState: GetAppState,
  updateFunc: MonthUpdater
): void {
  const actualMonth = getActualMonth(getState);
  const updatedMonth = updateFunc(actualMonth);
  dispatch(createUpdateAction(updatedMonth));
}

async function updateNextMonthIfNeeded(
  getState: GetAppState,
  updateFunc: MonthUpdater
): Promise<void> {
  const actualMonth = getActualMonth(getState);
  const nextMonthDM = await getNextMonth(actualMonth.scheduleKey);
  if (shouldUpdateNextMonth(nextMonthDM)) {
    const updatedNextMonth = updateFunc(nextMonthDM!);
    await new LocalStorageProvider().saveBothMonthRevisionsIfNeeded("primary", updatedNextMonth);
  }
}

function createUpdateAction(updatedMonth: MonthDataModel): ThunkFunction<ScheduleDataModel> {
  const { year, month } = updatedMonth.scheduleKey;
  const revision: RevisionType = VerboseDateHelper.isMonthInFuture(month, year)
    ? "primary"
    : "actual";

  return ScheduleDataActionCreator.setScheduleFromMonthDMAndSaveInDB(updatedMonth, revision);
}

async function getNextMonth(actualMonthKey: ScheduleKey): Promise<MonthDataModel | undefined> {
  return await new LocalStorageProvider().getMonthRevision(
    actualMonthKey.nextMonthKey.getRevisionKey("primary")
  );
}

function shouldUpdateNextMonth(nextMonthDM: MonthDataModel | undefined): boolean {
  return !_.isNil(nextMonthDM) && nextMonthDM.isAutoGenerated;
}

function getActualMonth(getState: () => ApplicationStateModel): MonthDataModel {
  const actualSchedule = getState().actualState.persistentSchedule.present;
  return cropScheduleDMToMonthDM(actualSchedule);
}
